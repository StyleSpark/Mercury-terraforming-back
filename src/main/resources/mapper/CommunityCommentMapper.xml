<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.matdongsan.api.mapper.CommunityCommentMapper">

    <select id="selectCommentCountGroupByCommunity" parameterType="list" resultType="map">
        SELECT community_id
               ,COUNT(*) AS comment_count
          FROM community_comments
         WHERE deleted_at IS NULL
        <if test="list != null and list.size() > 0">
            AND community_id IN
            <foreach collection="list" item="id" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
      GROUP BY community_id
    </select>

    <insert id="insertCommunityComment" useGeneratedKeys="true" keyProperty="id" parameterType="com.matdongsan.api.dto.community.comment.CommentCreateRequest">
        INSERT INTO community_comments (community_id, user_id, parent_id, content)
        VALUES (#{communityId}, #{userId}, #{parentId}, #{content})
    </insert>

    <select id="selectComments" parameterType="com.matdongsan.api.dto.community.comment.CommentGetRequest" resultType="community_comments">
        SELECT c.id
              ,c.community_id
              ,c.user_id
              ,u.name AS user_name
              ,u.profile
              ,c.parent_id
              ,c.content
              ,COUNT(DISTINCT cc.id) AS reply_count
              ,COALESCE(SUM(CASE WHEN r.reaction_type = 'LIKE' THEN 1 ELSE 0 END), 0) AS like_count
              ,COALESCE(SUM(CASE WHEN r.reaction_type = 'DISLIKE' THEN 1 ELSE 0 END), 0) AS dislike_count
              ,c.created_at
         FROM community_comments c
         JOIN users u ON c.user_id = u.id
    LEFT JOIN community_comments cc ON cc.parent_id = c.id AND cc.deleted_at IS NULL
    LEFT JOIN reactions r ON r.target_id = c.id AND r.target_type = 'COMMENT'
        WHERE c.community_id = #{communityId}
          AND c.parent_id IS NULL
          AND c.deleted_at IS NULL
     GROUP BY c.id, c.community_id, c.user_id, u.name, u.profile, c.parent_id, c.content, c.created_at
     ORDER BY c.created_at ASC
        LIMIT #{size}
       OFFSET #{offset}
    </select>

    <select id="countCommunityComments" parameterType="com.matdongsan.api.dto.community.comment.CommentGetRequest" resultType="java.lang.Integer">
        SELECT COUNT(*)
          FROM community_comments
         WHERE community_id = #{communityId}
           AND deleted_at IS NULL
    </select>

    <select id="selectCommentReplies" parameterType="com.matdongsan.api.dto.community.comment.CommentGetRequest" resultType="community_comments">
        SELECT c.id
              ,c.community_id
              ,c.user_id
              ,u.name AS user_name
              ,u.profile
              ,c.parent_id
              ,c.content
              ,0 AS reply_count
              ,COALESCE(SUM(CASE WHEN r.reaction_type = 'LIKE' THEN 1 ELSE 0 END), 0) AS like_count
              ,COALESCE(SUM(CASE WHEN r.reaction_type = 'DISLIKE' THEN 1 ELSE 0 END), 0) AS dislike_count
              ,c.created_at
         FROM community_comments c
         JOIN users u ON c.user_id = u.id
    LEFT JOIN reactions r ON r.target_id = c.id AND r.target_type = 'COMMENT'
        WHERE c.parent_id = #{parentId}
          AND c.deleted_at IS NULL
     GROUP BY c.id, c.community_id, c.user_id, u.name, u.profile, c.parent_id, c.content, c.created_at
     ORDER BY c.created_at ASC
        LIMIT #{size}
       OFFSET #{offset}
    </select>

    <select id="countCommentReplies" parameterType="com.matdongsan.api.dto.community.comment.CommentGetRequest" resultType="java.lang.Integer">
        SELECT COUNT(*)
          FROM community_comments
         WHERE community_id = #{communityId}
           AND parent_id = #{parentId}
           AND deleted_at IS NULL
    </select>

    <update id="updateComment" parameterType="com.matdongsan.api.dto.community.comment.CommentUpdateRequest">
        UPDATE community_comments
           SET content = #{content}
               ,updated_at = NOW()
         WHERE id = #{id}
           AND user_id = #{userId}
           AND deleted_at IS NULL
    </update>

    <update id="softDeleteComment" parameterType="com.matdongsan.api.dto.community.comment.CommentDeleteRequest">
        UPDATE community_comments
           SET deleted_at = NOW()
         WHERE id = #{id}
           AND user_id = #{userId}
           AND deleted_at IS NULL
    </update>


</mapper>